

-- Reload systemd and restart:

sudo systemctl daemon-reexec
sudo systemctl daemon-reload
sudo systemctl restart gunicorn-goosegoosego


-- Check status

sudo systemctl status gunicorn-goosegoosego

-- sudo nano /etc/systemd/system/gunicorn-goosegoosego.service

[Unit]
Description=Gunicorn daemon for GooseGooseGo Django project
After=network.target

[Service]
User=adm_linux
Group=www-data
WorkingDirectory=/home/adm_linux/GooseGooseGo
Environment="PATH=/home/adm_linux/GooseGooseGo/venv/bin"
ExecStart=/home/adm_linux/GooseGooseGo/venv/bin/gunicorn --workers 3 --bind unix:/home/adm_linux/GooseGooseGo/goosegoosego.sock goosegoosego.wsgi:applicati>


[Install]
WantedBy=multi-user.target

---

sudo nano /etc/nginx/sites-available/goosegoosego

Nginx config


upstream ggg_frontend {
    server 127.0.0.1:3000;
}

server {
    listen 443 ssl;
    server_name goosegoosego.co.uk;

    ssl_certificate /etc/letsencrypt/live/goosegoosego.co.uk/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/goosegoosego.co.uk/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location /static/ {
        root /home/adm_linux/GooseGooseGo;
    }

    location /api/ {
        include proxy_params;
        proxy_pass http://unix:/home/adm_linux/GooseGooseGo/goosegoosego.sock;
    }

    location / {
        proxy_pass http://ggg_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

server {
    listen 80;
    server_name goosegoosego.co.uk;
    return 301 https://$host$request_uri;
}

------------------------
server {
    server_name goosegoosego.co.uk;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/adm_linux/GooseGooseGo;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/adm_linux/GooseGooseGo/goosegoosego.sock;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/goosegoosego.co.uk/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/goosegoosego.co.uk/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
    if ($host = goosegoosego.co.uk) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name goosegoosego.co.uk;
    return 404; # managed by Certbot


}

---

-- Enable site and test config:

sudo ln -s /etc/nginx/sites-available/goosegoosego /etc/nginx/sites-enabled
sudo nginx -t

-----
-- Reload
sudo systemctl reload nginx

---
Fix: Add your domain to ALLOWED_HOSTS
1. Open settings.py:
nano ~/GooseGooseGo/goosegoosego/settings.py
2. Find the ALLOWED_HOSTS setting and edit it like this:

ALLOWED_HOSTS = [
    'goosegoosego.co.uk',
    'www.goosegoosego.co.uk',  # if using www too
    'localhost',
    '127.0.0.1'
]
‚úÖ You can use '*' for testing, but it‚Äôs not recommended in production:


ALLOWED_HOSTS = ['*']  # ‚Üê only for dev/testing
3. Save and exit (Ctrl+O, Enter, Ctrl+X)
4. Restart Gunicorn:

sudo systemctl restart gunicorn-goosegoosego
5. Refresh your browser at:

http://goosegoosego.co.uk


------------------------------------------------------------

‚úÖ Step-by-step: Initialize Git for Your Django Project
Assuming your project is located at:


/home/adm_linux/GooseGooseGo
1. Initialize the Git repository

cd /home/adm_linux/GooseGooseGo
git init

2. Create a .gitignore file
Here‚Äôs a recommended .gitignore for Django + Python:

nano .gitignore
Paste this in:

gitignore

# Python
__pycache__/
*.py[cod]
*.sqlite3
*.log

# Django
*.db
*.pot
*.pyc
*.pyo
*.pyd
*.sqlite3
db.sqlite3

# Virtual Environment
venv/
.env

# VSCode / PyCharm
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Migrations
**/migrations/*.pyc
**/migrations/__pycache__/
**/migrations/*.log
**/migrations/*.db

# Static/Media
staticfiles/
media/

# Certbot (if present)
*.pem
*.csr
*.key

3. Add and commit your files

git add .
git commit -m "Initial commit for GooseGooseGo Django project"

4. (Optional) Connect to GitHub
If you've created a remote repo:

git remote add origin https://github.com/ExploseIT/GooseGooseGo.git
git push -u origin main  # or `master`, depending on default branch
If you're using GitHub and need help creating the remote repo, I can guide you through that too.

-----------------------

If you want to force-push your local project and overwrite the GitHub history (removes the README commit):

git push -f origin main

------------------------

 Step-by-step: Add HTTPS to goosegoosego.co.uk
‚úÖ 1. Install Certbot (for Nginx)

sudo apt update
sudo apt install certbot python3-certbot-nginx

‚úÖ 2. Verify your Nginx config
Ensure you have a server block like:


server {
    server_name goosegoosego.co.uk www.goosegoosego.co.uk;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/adm_linux/GooseGooseGo;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/adm_linux/GooseGooseGo/goosegoosego.sock;
    }
}
Make sure this config is active and reload Nginx:


sudo nginx -t
sudo systemctl reload nginx

‚úÖ 3. Run Certbot for Nginx
Now issue the SSL cert:


sudo certbot --nginx -d goosegoosego.co.uk -d www.goosegoosego.co.uk
Follow the prompts:

Choose to redirect HTTP to HTTPS when asked

Certbot will update your Nginx config for SSL

‚úÖ 4. Auto-renewal (already enabled by default)
You can confirm with:


sudo certbot renew --dry-run
Once that‚Äôs done, you‚Äôll be able to visit:

üîí https://goosegoosego.co.uk


-------
cd ~
zip -r GooseGooseGo.zip GooseGooseGo
zip -r GooseGooseGo_260724_0847.zip GooseGooseGo